// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calcBATS
SEXP calcBATS(SEXP ys, SEXP yHats, SEXP wTransposes, SEXP Fs, SEXP xs, SEXP gs, SEXP es);
RcppExport SEXP _forecast_calcBATS(SEXP ysSEXP, SEXP yHatsSEXP, SEXP wTransposesSEXP, SEXP FsSEXP, SEXP xsSEXP, SEXP gsSEXP, SEXP esSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yHats(yHatsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type wTransposes(wTransposesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type es(esSEXP);
    rcpp_result_gen = Rcpp::wrap(calcBATS(ys, yHats, wTransposes, Fs, xs, gs, es));
    return rcpp_result_gen;
END_RCPP
}
// calcBATSFaster
SEXP calcBATSFaster(SEXP ys, SEXP yHats, SEXP wTransposes, SEXP Fs, SEXP xs, SEXP gs, SEXP es, SEXP xNought_s, SEXP sPeriods_s, SEXP betaV, SEXP tau_s, SEXP p_s, SEXP q_s);
RcppExport SEXP _forecast_calcBATSFaster(SEXP ysSEXP, SEXP yHatsSEXP, SEXP wTransposesSEXP, SEXP FsSEXP, SEXP xsSEXP, SEXP gsSEXP, SEXP esSEXP, SEXP xNought_sSEXP, SEXP sPeriods_sSEXP, SEXP betaVSEXP, SEXP tau_sSEXP, SEXP p_sSEXP, SEXP q_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ys(ysSEXP);
    Rcpp::traits::input_parameter< SEXP >::type yHats(yHatsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type wTransposes(wTransposesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type es(esSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xNought_s(xNought_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sPeriods_s(sPeriods_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type betaV(betaVSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tau_s(tau_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_s(p_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type q_s(q_sSEXP);
    rcpp_result_gen = Rcpp::wrap(calcBATSFaster(ys, yHats, wTransposes, Fs, xs, gs, es, xNought_s, sPeriods_s, betaV, tau_s, p_s, q_s));
    return rcpp_result_gen;
END_RCPP
}
// calcWTilda
SEXP calcWTilda(SEXP wTildaTransposes, SEXP Ds);
RcppExport SEXP _forecast_calcWTilda(SEXP wTildaTransposesSEXP, SEXP DsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type wTildaTransposes(wTildaTransposesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Ds(DsSEXP);
    rcpp_result_gen = Rcpp::wrap(calcWTilda(wTildaTransposes, Ds));
    return rcpp_result_gen;
END_RCPP
}
// etsTargetFunctionInit
SEXP etsTargetFunctionInit(SEXP p_y, SEXP p_nstate, SEXP p_errortype, SEXP p_trendtype, SEXP p_seasontype, SEXP p_damped, SEXP p_lower, SEXP p_upper, SEXP p_opt_crit, SEXP p_nmse, SEXP p_bounds, SEXP p_m, SEXP p_optAlpha, SEXP p_optBeta, SEXP p_optGamma, SEXP p_optPhi, SEXP p_givenAlpha, SEXP p_givenBeta, SEXP p_givenGamma, SEXP p_givenPhi, SEXP p_alpha, SEXP p_beta, SEXP p_gamma, SEXP p_phi, SEXP p_rho);
RcppExport SEXP _forecast_etsTargetFunctionInit(SEXP p_ySEXP, SEXP p_nstateSEXP, SEXP p_errortypeSEXP, SEXP p_trendtypeSEXP, SEXP p_seasontypeSEXP, SEXP p_dampedSEXP, SEXP p_lowerSEXP, SEXP p_upperSEXP, SEXP p_opt_critSEXP, SEXP p_nmseSEXP, SEXP p_boundsSEXP, SEXP p_mSEXP, SEXP p_optAlphaSEXP, SEXP p_optBetaSEXP, SEXP p_optGammaSEXP, SEXP p_optPhiSEXP, SEXP p_givenAlphaSEXP, SEXP p_givenBetaSEXP, SEXP p_givenGammaSEXP, SEXP p_givenPhiSEXP, SEXP p_alphaSEXP, SEXP p_betaSEXP, SEXP p_gammaSEXP, SEXP p_phiSEXP, SEXP p_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_y(p_ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_nstate(p_nstateSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_errortype(p_errortypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_trendtype(p_trendtypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_seasontype(p_seasontypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_damped(p_dampedSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_lower(p_lowerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_upper(p_upperSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_opt_crit(p_opt_critSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_nmse(p_nmseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_bounds(p_boundsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_m(p_mSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_optAlpha(p_optAlphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_optBeta(p_optBetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_optGamma(p_optGammaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_optPhi(p_optPhiSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_givenAlpha(p_givenAlphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_givenBeta(p_givenBetaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_givenGamma(p_givenGammaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_givenPhi(p_givenPhiSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_alpha(p_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_beta(p_betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_gamma(p_gammaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_phi(p_phiSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_rho(p_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(etsTargetFunctionInit(p_y, p_nstate, p_errortype, p_trendtype, p_seasontype, p_damped, p_lower, p_upper, p_opt_crit, p_nmse, p_bounds, p_m, p_optAlpha, p_optBeta, p_optGamma, p_optPhi, p_givenAlpha, p_givenBeta, p_givenGamma, p_givenPhi, p_alpha, p_beta, p_gamma, p_phi, p_rho));
    return rcpp_result_gen;
END_RCPP
}
// etsNelderMead
SEXP etsNelderMead(SEXP p_var, SEXP p_env, SEXP p_abstol, SEXP p_intol, SEXP p_alpha, SEXP p_beta, SEXP p_gamma, SEXP p_trace, SEXP p_maxit);
RcppExport SEXP _forecast_etsNelderMead(SEXP p_varSEXP, SEXP p_envSEXP, SEXP p_abstolSEXP, SEXP p_intolSEXP, SEXP p_alphaSEXP, SEXP p_betaSEXP, SEXP p_gammaSEXP, SEXP p_traceSEXP, SEXP p_maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_var(p_varSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_env(p_envSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_abstol(p_abstolSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_intol(p_intolSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_alpha(p_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_beta(p_betaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_gamma(p_gammaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_trace(p_traceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_maxit(p_maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(etsNelderMead(p_var, p_env, p_abstol, p_intol, p_alpha, p_beta, p_gamma, p_trace, p_maxit));
    return rcpp_result_gen;
END_RCPP
}
// makeBATSWMatrix
SEXP makeBATSWMatrix(SEXP smallPhi_s, SEXP sPeriods_s, SEXP arCoefs_s, SEXP maCoefs_s);
RcppExport SEXP _forecast_makeBATSWMatrix(SEXP smallPhi_sSEXP, SEXP sPeriods_sSEXP, SEXP arCoefs_sSEXP, SEXP maCoefs_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type smallPhi_s(smallPhi_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sPeriods_s(sPeriods_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type arCoefs_s(arCoefs_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maCoefs_s(maCoefs_sSEXP);
    rcpp_result_gen = Rcpp::wrap(makeBATSWMatrix(smallPhi_s, sPeriods_s, arCoefs_s, maCoefs_s));
    return rcpp_result_gen;
END_RCPP
}
// makeBATSGMatrix
SEXP makeBATSGMatrix(SEXP alpha_s, SEXP beta_s, SEXP gammaVector_s, SEXP seasonalPeriods_s, SEXP p_s, SEXP q_s);
RcppExport SEXP _forecast_makeBATSGMatrix(SEXP alpha_sSEXP, SEXP beta_sSEXP, SEXP gammaVector_sSEXP, SEXP seasonalPeriods_sSEXP, SEXP p_sSEXP, SEXP q_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammaVector_s(gammaVector_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type seasonalPeriods_s(seasonalPeriods_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_s(p_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type q_s(q_sSEXP);
    rcpp_result_gen = Rcpp::wrap(makeBATSGMatrix(alpha_s, beta_s, gammaVector_s, seasonalPeriods_s, p_s, q_s));
    return rcpp_result_gen;
END_RCPP
}
// makeTBATSWMatrix
SEXP makeTBATSWMatrix(SEXP smallPhi_s, SEXP kVector_s, SEXP arCoefs_s, SEXP maCoefs_s, SEXP tau_s);
RcppExport SEXP _forecast_makeTBATSWMatrix(SEXP smallPhi_sSEXP, SEXP kVector_sSEXP, SEXP arCoefs_sSEXP, SEXP maCoefs_sSEXP, SEXP tau_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type smallPhi_s(smallPhi_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kVector_s(kVector_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type arCoefs_s(arCoefs_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maCoefs_s(maCoefs_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tau_s(tau_sSEXP);
    rcpp_result_gen = Rcpp::wrap(makeTBATSWMatrix(smallPhi_s, kVector_s, arCoefs_s, maCoefs_s, tau_s));
    return rcpp_result_gen;
END_RCPP
}
// makeCIMatrix
SEXP makeCIMatrix(SEXP k_s, SEXP m_s);
RcppExport SEXP _forecast_makeCIMatrix(SEXP k_sSEXP, SEXP m_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type k_s(k_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type m_s(m_sSEXP);
    rcpp_result_gen = Rcpp::wrap(makeCIMatrix(k_s, m_s));
    return rcpp_result_gen;
END_RCPP
}
// makeSIMatrix
SEXP makeSIMatrix(SEXP k_s, SEXP m_s);
RcppExport SEXP _forecast_makeSIMatrix(SEXP k_sSEXP, SEXP m_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type k_s(k_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type m_s(m_sSEXP);
    rcpp_result_gen = Rcpp::wrap(makeSIMatrix(k_s, m_s));
    return rcpp_result_gen;
END_RCPP
}
// makeAIMatrix
SEXP makeAIMatrix(SEXP C_s, SEXP S_s, SEXP k_s);
RcppExport SEXP _forecast_makeAIMatrix(SEXP C_sSEXP, SEXP S_sSEXP, SEXP k_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type C_s(C_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type S_s(S_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type k_s(k_sSEXP);
    rcpp_result_gen = Rcpp::wrap(makeAIMatrix(C_s, S_s, k_s));
    return rcpp_result_gen;
END_RCPP
}
// updateFMatrix
SEXP updateFMatrix(SEXP F_s, SEXP smallPhi_s, SEXP alpha_s, SEXP beta_s, SEXP gammaBold_s, SEXP ar_s, SEXP ma_s, SEXP tau_s);
RcppExport SEXP _forecast_updateFMatrix(SEXP F_sSEXP, SEXP smallPhi_sSEXP, SEXP alpha_sSEXP, SEXP beta_sSEXP, SEXP gammaBold_sSEXP, SEXP ar_sSEXP, SEXP ma_sSEXP, SEXP tau_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type F_s(F_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type smallPhi_s(smallPhi_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammaBold_s(gammaBold_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ar_s(ar_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ma_s(ma_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tau_s(tau_sSEXP);
    rcpp_result_gen = Rcpp::wrap(updateFMatrix(F_s, smallPhi_s, alpha_s, beta_s, gammaBold_s, ar_s, ma_s, tau_s));
    return rcpp_result_gen;
END_RCPP
}
// updateWtransposeMatrix
SEXP updateWtransposeMatrix(SEXP wTranspose_s, SEXP smallPhi_s, SEXP tau_s, SEXP arCoefs_s, SEXP maCoefs_s, SEXP p_s, SEXP q_s);
RcppExport SEXP _forecast_updateWtransposeMatrix(SEXP wTranspose_sSEXP, SEXP smallPhi_sSEXP, SEXP tau_sSEXP, SEXP arCoefs_sSEXP, SEXP maCoefs_sSEXP, SEXP p_sSEXP, SEXP q_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type wTranspose_s(wTranspose_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type smallPhi_s(smallPhi_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tau_s(tau_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type arCoefs_s(arCoefs_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type maCoefs_s(maCoefs_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_s(p_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type q_s(q_sSEXP);
    rcpp_result_gen = Rcpp::wrap(updateWtransposeMatrix(wTranspose_s, smallPhi_s, tau_s, arCoefs_s, maCoefs_s, p_s, q_s));
    return rcpp_result_gen;
END_RCPP
}
// updateGMatrix
SEXP updateGMatrix(SEXP g_s, SEXP gammaBold_s, SEXP alpha_s, SEXP beta_s, SEXP gammaVector_s, SEXP seasonalPeriods_s);
RcppExport SEXP _forecast_updateGMatrix(SEXP g_sSEXP, SEXP gammaBold_sSEXP, SEXP alpha_sSEXP, SEXP beta_sSEXP, SEXP gammaVector_sSEXP, SEXP seasonalPeriods_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type g_s(g_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammaBold_s(gammaBold_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammaVector_s(gammaVector_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type seasonalPeriods_s(seasonalPeriods_sSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGMatrix(g_s, gammaBold_s, alpha_s, beta_s, gammaVector_s, seasonalPeriods_s));
    return rcpp_result_gen;
END_RCPP
}
// updateTBATSGammaBold
SEXP updateTBATSGammaBold(SEXP gammaBold_s, SEXP kVector_s, SEXP gammaOne_s, SEXP gammaTwo_s);
RcppExport SEXP _forecast_updateTBATSGammaBold(SEXP gammaBold_sSEXP, SEXP kVector_sSEXP, SEXP gammaOne_sSEXP, SEXP gammaTwo_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type gammaBold_s(gammaBold_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type kVector_s(kVector_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammaOne_s(gammaOne_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammaTwo_s(gammaTwo_sSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTBATSGammaBold(gammaBold_s, kVector_s, gammaOne_s, gammaTwo_s));
    return rcpp_result_gen;
END_RCPP
}
// updateTBATSGMatrix
SEXP updateTBATSGMatrix(SEXP g_s, SEXP gammaBold_s, SEXP alpha_s, SEXP beta_s);
RcppExport SEXP _forecast_updateTBATSGMatrix(SEXP g_sSEXP, SEXP gammaBold_sSEXP, SEXP alpha_sSEXP, SEXP beta_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type g_s(g_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gammaBold_s(gammaBold_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_s(beta_sSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTBATSGMatrix(g_s, gammaBold_s, alpha_s, beta_s));
    return rcpp_result_gen;
END_RCPP
}

RcppExport void etscalc(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport void etsforecast(void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP etssimulate(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_forecast_calcBATS", (DL_FUNC) &_forecast_calcBATS, 7},
    {"_forecast_calcBATSFaster", (DL_FUNC) &_forecast_calcBATSFaster, 13},
    {"_forecast_calcWTilda", (DL_FUNC) &_forecast_calcWTilda, 2},
    {"_forecast_etsTargetFunctionInit", (DL_FUNC) &_forecast_etsTargetFunctionInit, 25},
    {"_forecast_etsNelderMead", (DL_FUNC) &_forecast_etsNelderMead, 9},
    {"_forecast_makeBATSWMatrix", (DL_FUNC) &_forecast_makeBATSWMatrix, 4},
    {"_forecast_makeBATSGMatrix", (DL_FUNC) &_forecast_makeBATSGMatrix, 6},
    {"_forecast_makeTBATSWMatrix", (DL_FUNC) &_forecast_makeTBATSWMatrix, 5},
    {"_forecast_makeCIMatrix", (DL_FUNC) &_forecast_makeCIMatrix, 2},
    {"_forecast_makeSIMatrix", (DL_FUNC) &_forecast_makeSIMatrix, 2},
    {"_forecast_makeAIMatrix", (DL_FUNC) &_forecast_makeAIMatrix, 3},
    {"_forecast_updateFMatrix", (DL_FUNC) &_forecast_updateFMatrix, 8},
    {"_forecast_updateWtransposeMatrix", (DL_FUNC) &_forecast_updateWtransposeMatrix, 7},
    {"_forecast_updateGMatrix", (DL_FUNC) &_forecast_updateGMatrix, 6},
    {"_forecast_updateTBATSGammaBold", (DL_FUNC) &_forecast_updateTBATSGammaBold, 4},
    {"_forecast_updateTBATSGMatrix", (DL_FUNC) &_forecast_updateTBATSGMatrix, 4},
    {"etscalc",     (DL_FUNC) &etscalc,     15},
    {"etsforecast", (DL_FUNC) &etsforecast,  7},
    {"etssimulate", (DL_FUNC) &etssimulate, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_forecast(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
